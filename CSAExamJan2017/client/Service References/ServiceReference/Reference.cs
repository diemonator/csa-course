//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="House", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class House : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAgency", CallbackContract=typeof(RentClient.ServiceReference.IAgencyCallback))]
    public interface IAgency {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetHousePrice", ReplyAction="http://tempuri.org/IAgency/GetHousePriceResponse")]
        int GetHousePrice(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetHousePrice", ReplyAction="http://tempuri.org/IAgency/GetHousePriceResponse")]
        System.Threading.Tasks.Task<int> GetHousePriceAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetNumberOfOffers", ReplyAction="http://tempuri.org/IAgency/GetNumberOfOffersResponse")]
        int GetNumberOfOffers(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetNumberOfOffers", ReplyAction="http://tempuri.org/IAgency/GetNumberOfOffersResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfOffersAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetAvailableHouses", ReplyAction="http://tempuri.org/IAgency/GetAvailableHousesResponse")]
        System.Collections.Generic.List<RentClient.ServiceReference.House> GetAvailableHouses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/GetAvailableHouses", ReplyAction="http://tempuri.org/IAgency/GetAvailableHousesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RentClient.ServiceReference.House>> GetAvailableHousesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/AddOffer", ReplyAction="http://tempuri.org/IAgency/AddOfferResponse")]
        bool AddOffer(string address, int offer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgency/AddOffer", ReplyAction="http://tempuri.org/IAgency/AddOfferResponse")]
        System.Threading.Tasks.Task<bool> AddOfferAsync(string address, int offer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAgency/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAgency/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAgency/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAgency/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgencyCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAgency/Notify")]
        void Notify(string address);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgencyChannel : RentClient.ServiceReference.IAgency, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgencyClient : System.ServiceModel.DuplexClientBase<RentClient.ServiceReference.IAgency>, RentClient.ServiceReference.IAgency {
        
        public AgencyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AgencyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AgencyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int GetHousePrice(string address) {
            return base.Channel.GetHousePrice(address);
        }
        
        public System.Threading.Tasks.Task<int> GetHousePriceAsync(string address) {
            return base.Channel.GetHousePriceAsync(address);
        }
        
        public int GetNumberOfOffers(string address) {
            return base.Channel.GetNumberOfOffers(address);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfOffersAsync(string address) {
            return base.Channel.GetNumberOfOffersAsync(address);
        }
        
        public System.Collections.Generic.List<RentClient.ServiceReference.House> GetAvailableHouses() {
            return base.Channel.GetAvailableHouses();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RentClient.ServiceReference.House>> GetAvailableHousesAsync() {
            return base.Channel.GetAvailableHousesAsync();
        }
        
        public bool AddOffer(string address, int offer) {
            return base.Channel.AddOffer(address, offer);
        }
        
        public System.Threading.Tasks.Task<bool> AddOfferAsync(string address, int offer) {
            return base.Channel.AddOfferAsync(address, offer);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
